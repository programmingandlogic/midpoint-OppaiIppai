/*
 * File: MidpointFindingKarel.java
 * -------------------------------
 * When you finish writing it, the MidpointFindingKarel class should
 * leave a beeper on the corner closest to the center of 1st Street
 * (or either of the two central corners if 1st Street has an even
 * number of corners).  Karel can put down additional beepers as it
 * looks for the midpoint, but must pick them up again before it
 * stops.  The world may be of any size, but you are allowed to
 * assume that it is at least as tall as it is wide.
 */

import stanford.karel.*;

public class MidpointFindingKarel extends SuperKarel {

	public void run(){
	setBeepers();
	checkBeepers();
	checkBeepers();
		
	}	
		
		
		
		
		
		
		
	private void checkBeepers(){
		if (frontIsBlocked()){
			pickBeeper();
			turnAround();
			nyoom();
			pickBeeper();
			turnAround();
			nyoom();
			turnAround();
			move();
			
		}
		else{
			if (beepersPresent())
				while (beepersPresent()){
					move();
				}
				backUp();
				pickBeeper();
				turnAround();
				nyoom();
				backUp();
				pickBeeper();
				while (noBeepersPresent()){
					backUp();
				}
		}
	}		
		
	private void backUp(){
		turnAround();
		move();
		turnAround();
	}
		
		
		
	private void setBeepers(){
		putBeeper();
		while(frontIsClear()){
			move();
			putBeeper();
		}
	}	

	private void nyoom(){
	while (frontIsClear()){
		move();
	}


	}
}
